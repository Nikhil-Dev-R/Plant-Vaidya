{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC,6KAAA,CAAA,OAAwB;QACvB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;;AACA,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4OACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,YAA6B;YAAC,WAAU;sBACvC,cAAA,6LAAC,yMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;;AACA,eAAe,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/PlantAnalysisForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, type FormEvent, useRef, ChangeEvent } from 'react';\nimport Image from 'next/image';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { UploadCloud, Sparkles, ImageOff, Info, Bug } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { AnalysisAction } from '@/types';\n\ninterface PlantAnalysisFormProps {\n  onSubmit: (photoDataUri: string, description: string, originalImageName: string, action: AnalysisAction) => void;\n  isProcessing: boolean; // Renamed from isAnalyzing to be more generic\n}\n\nexport default function PlantAnalysisForm({ onSubmit, isProcessing }: PlantAnalysisFormProps) {\n  const [description, setDescription] = useState('');\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [selectedAction, setSelectedAction] = useState<AnalysisAction>('disease');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleImageChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) { // 5MB limit\n        toast({\n          variant: \"destructive\",\n          title: \"Image too large\",\n          description: \"Please upload an image smaller than 5MB.\",\n        });\n        if (fileInputRef.current) {\n            fileInputRef.current.value = \"\"; // Reset file input\n        }\n        setImageFile(null);\n        setImagePreview(null);\n        return;\n      }\n      setImageFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      setImageFile(null);\n      setImagePreview(null);\n    }\n  };\n\n  const handleSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n    if (!imageFile || !imagePreview) {\n      toast({\n        variant: \"destructive\",\n        title: \"No image selected\",\n        description: \"Please upload an image of your plant.\",\n      });\n      return;\n    }\n    onSubmit(imagePreview, description, imageFile.name, selectedAction);\n  };\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl flex items-center gap-2\">\n          <Sparkles className=\"text-primary h-6 w-6\" />\n          Plant Helper\n        </CardTitle>\n        <CardDescription>\n          Upload an image and choose an action.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"plant-image\" className=\"text-base\">Plant Image</Label>\n            <Input\n              id=\"plant-image\"\n              type=\"file\"\n              accept=\"image/png, image/jpeg, image/webp\"\n              onChange={handleImageChange}\n              ref={fileInputRef}\n              className=\"file:text-primary file:font-semibold hover:file:bg-primary/10\"\n              aria-describedby=\"plant-image-hint\"\n            />\n            <p id=\"plant-image-hint\" className=\"text-sm text-muted-foreground\">\n              PNG, JPG, WEBP. Max 5MB.\n            </p>\n          </div>\n\n          {imagePreview && (\n            <div className=\"mt-4 border border-border rounded-md p-2 bg-muted/30\">\n              <Image\n                src={imagePreview}\n                alt=\"Plant preview\"\n                width={400}\n                height={300}\n                className=\"rounded-md object-contain max-h-[300px] w-full\"\n                data-ai-hint=\"plant agriculture\"\n              />\n            </div>\n          )}\n          {!imagePreview && (\n             <div className=\"mt-4 border border-dashed border-border rounded-md p-8 flex flex-col items-center justify-center bg-muted/30 h-[200px]\">\n                <ImageOff className=\"h-16 w-16 text-muted-foreground mb-2\" />\n                <p className=\"text-muted-foreground\">Image preview will appear here</p>\n             </div>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"plant-description\" className=\"text-base\">Description (Optional)</Label>\n            <Textarea\n              id=\"plant-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"e.g., Yellow spots on leaves, wilting stems, or any specific questions about the plant.\"\n              rows={3}\n              className=\"resize-none\"\n            />\n          </div>\n          \n          <div className=\"space-y-3\">\n            <Label className=\"text-base\">Choose Action</Label>\n            <RadioGroup\n              value={selectedAction}\n              onValueChange={(value) => setSelectedAction(value as AnalysisAction)}\n              className=\"flex flex-col sm:flex-row gap-4\"\n            >\n              <Label\n                htmlFor=\"action-disease\"\n                className=\"flex items-center gap-2 p-3 border rounded-md cursor-pointer hover:bg-accent/50 data-[state=checked]:bg-accent/80 data-[state=checked]:border-primary flex-1\"\n                data-state={selectedAction === 'disease' ? 'checked' : 'unchecked'}\n              >\n                <RadioGroupItem value=\"disease\" id=\"action-disease\" />\n                <Bug className=\"h-5 w-5 text-destructive\" />\n                Analyze Disease\n              </Label>\n              <Label\n                htmlFor=\"action-info\"\n                className=\"flex items-center gap-2 p-3 border rounded-md cursor-pointer hover:bg-accent/50 data-[state=checked]:bg-accent/80 data-[state=checked]:border-primary flex-1\"\n                data-state={selectedAction === 'info' ? 'checked' : 'unchecked'}\n              >\n                <RadioGroupItem value=\"info\" id=\"action-info\" />\n                <Info className=\"h-5 w-5 text-blue-500\" />\n                Get Plant Info\n              </Label>\n            </RadioGroup>\n          </div>\n\n\n          <Button type=\"submit\" disabled={isProcessing || !imageFile} className=\"w-full text-base py-3\">\n            {isProcessing ? (\n              <>\n                <UploadCloud className=\"mr-2 h-5 w-5 animate-pulse\" />\n                Processing...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2 h-5 w-5\" />\n                {selectedAction === 'disease' ? 'Analyze Disease' : 'Get Info'}\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 737, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,6LAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 814, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/AnalysisResult.tsx"],"sourcesContent":["\"use client\";\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { CheckCircle2, AlertTriangle, ListChecks, Leaf } from 'lucide-react';\nimport type { AnalysisResultData } from '@/types';\n\ninterface AnalysisResultProps {\n  result: AnalysisResultData | null;\n}\n\nexport default function AnalysisResult({ result }: AnalysisResultProps) {\n  if (!result) return null;\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto mt-8 shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl flex items-center gap-2\">\n          <Leaf className=\"text-primary h-6 w-6\" />\n          Analysis Results\n        </CardTitle>\n        <CardDescription>\n          Here's what our AI found about your plant.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {result.diseaseDetected ? (\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            <AlertTitle className=\"font-semibold\">Disease Detected: {result.diseaseName || \"Unknown Disease\"}</AlertTitle>\n            <AlertDescription>\n              Your plant may be affected. See suggestions below.\n            </AlertDescription>\n          </Alert>\n        ) : (\n          <Alert variant=\"default\" className=\"bg-primary/10 border-primary/30\">\n            <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n            <AlertTitle className=\"font-semibold text-primary\">No Disease Detected</AlertTitle>\n            <AlertDescription>\n              Your plant appears to be healthy based on the analysis.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {result.suggestedSolutions && result.suggestedSolutions.length > 0 && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2 flex items-center gap-2\">\n              <ListChecks className=\"text-accent h-5 w-5\" />\n              Suggested Actions:\n            </h3>\n            <ul className=\"list-disc list-inside space-y-1 pl-2 text-foreground/90 bg-muted/30 p-3 rounded-md\">\n              {result.suggestedSolutions.map((solution, index) => (\n                <li key={index}>{solution}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {!result.diseaseDetected && (!result.suggestedSolutions || result.suggestedSolutions.length === 0) && (\n           <p className=\"text-sm text-muted-foreground\">Keep up the good work with your plant care!</p>\n        )}\n         {result.diseaseDetected && (!result.suggestedSolutions || result.suggestedSolutions.length === 0) && (\n           <p className=\"text-sm text-muted-foreground\">No specific solutions were suggested for the detected issue. Consider general plant care or consulting a local expert.</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;;;;;AAWe,SAAS,eAAe,EAAE,MAAM,EAAuB;IACpE,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,6LAAC,mIAAA,CAAA,aAAU;;kCACT,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,6LAAC,qMAAA,CAAA,OAAI;gCAAC,WAAU;;;;;;4BAAyB;;;;;;;kCAG3C,6LAAC,mIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAInB,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;;oBACpB,OAAO,eAAe,iBACrB,6LAAC,oIAAA,CAAA,QAAK;wBAAC,SAAQ;;0CACb,6LAAC,2NAAA,CAAA,gBAAa;gCAAC,WAAU;;;;;;0CACzB,6LAAC,oIAAA,CAAA,aAAU;gCAAC,WAAU;;oCAAgB;oCAAmB,OAAO,WAAW,IAAI;;;;;;;0CAC/E,6LAAC,oIAAA,CAAA,mBAAgB;0CAAC;;;;;;;;;;;6CAKpB,6LAAC,oIAAA,CAAA,QAAK;wBAAC,SAAQ;wBAAU,WAAU;;0CACjC,6LAAC,wNAAA,CAAA,eAAY;gCAAC,WAAU;;;;;;0CACxB,6LAAC,oIAAA,CAAA,aAAU;gCAAC,WAAU;0CAA6B;;;;;;0CACnD,6LAAC,oIAAA,CAAA,mBAAgB;0CAAC;;;;;;;;;;;;oBAMrB,OAAO,kBAAkB,IAAI,OAAO,kBAAkB,CAAC,MAAM,GAAG,mBAC/D,6LAAC;;0CACC,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC,qNAAA,CAAA,aAAU;wCAAC,WAAU;;;;;;oCAAwB;;;;;;;0CAGhD,6LAAC;gCAAG,WAAU;0CACX,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC,UAAU,sBACxC,6LAAC;kDAAgB;uCAAR;;;;;;;;;;;;;;;;oBAMhB,CAAC,OAAO,eAAe,IAAI,CAAC,CAAC,OAAO,kBAAkB,IAAI,OAAO,kBAAkB,CAAC,MAAM,KAAK,CAAC,mBAC9F,6LAAC;wBAAE,WAAU;kCAAgC;;;;;;oBAE9C,OAAO,eAAe,IAAI,CAAC,CAAC,OAAO,kBAAkB,IAAI,OAAO,kBAAkB,CAAC,MAAM,KAAK,CAAC,mBAC9F,6LAAC;wBAAE,WAAU;kCAAgC;;;;;;;;;;;;;;;;;;AAKxD;KAxDwB","debugId":null}},
    {"offset": {"line": 1014, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/PlantInformationDisplay.tsx"],"sourcesContent":["\"use client\";\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Leaf, BookOpen, Sparkles, AlertCircle, Lightbulb, Droplets, Trees, Wind, ScissorsIcon } from 'lucide-react';\nimport type { PlantInformation } from '@/types';\n\ninterface PlantInformationDisplayProps {\n  info: PlantInformation | null;\n}\n\nexport default function PlantInformationDisplay({ info }: PlantInformationDisplayProps) {\n  if (!info) return null;\n\n  if (info.error) {\n    return (\n      <Card className=\"w-full max-w-lg mx-auto mt-8 shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl flex items-center gap-2\">\n            <AlertCircle className=\"text-destructive h-6 w-6\" />\n            Information Notice\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-5 w-5\" />\n            <AlertTitle>{info.error}</AlertTitle>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (!info.isPlant) {\n     return (\n      <Card className=\"w-full max-w-lg mx-auto mt-8 shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl flex items-center gap-2\">\n            <Sparkles className=\"text-primary h-6 w-6\" />\n            Analysis Result\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertCircle className=\"h-5 w-5\" />\n            <AlertTitle>Not a Plant</AlertTitle>\n            <AlertDescription>\n              The AI could not identify a plant in the provided image.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto mt-8 shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl flex items-center gap-2\">\n          <Leaf className=\"text-primary h-7 w-7\" />\n          {info.commonName || \"Plant Information\"}\n        </CardTitle>\n        {info.latinName && (\n          <CardDescription className=\"text-base italic text-muted-foreground\">\n            {info.latinName}\n          </CardDescription>\n        )}\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {info.plantDescription && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2 flex items-center gap-2\">\n              <BookOpen className=\"text-accent h-5 w-5\" />\n              About this Plant\n            </h3>\n            <p className=\"text-foreground/90 bg-muted/30 p-3 rounded-md text-sm\">{info.plantDescription}</p>\n          </div>\n        )}\n\n        {info.careTips && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n              <Sparkles className=\"text-accent h-5 w-5\" />\n              Care Tips\n            </h3>\n            <div className=\"space-y-3\">\n              {info.careTips.sunlight && (\n                <div className=\"flex items-start gap-3 p-2 bg-muted/30 rounded-md\">\n                  <Lightbulb className=\"h-5 w-5 text-yellow-500 mt-1 shrink-0\" />\n                  <div>\n                    <span className=\"font-medium text-sm\">Sunlight:</span>\n                    <p className=\"text-xs text-foreground/80\">{info.careTips.sunlight}</p>\n                  </div>\n                </div>\n              )}\n              {info.careTips.water && (\n                 <div className=\"flex items-start gap-3 p-2 bg-muted/30 rounded-md\">\n                  <Droplets className=\"h-5 w-5 text-blue-500 mt-1 shrink-0\" />\n                  <div>\n                    <span className=\"font-medium text-sm\">Water:</span>\n                    <p className=\"text-xs text-foreground/80\">{info.careTips.water}</p>\n                  </div>\n                </div>\n              )}\n              {info.careTips.soil && (\n                <div className=\"flex items-start gap-3 p-2 bg-muted/30 rounded-md\">\n                  <Trees className=\"h-5 w-5 text-green-700 mt-1 shrink-0\" /> {/* Using Trees as a proxy for soil */}\n                  <div>\n                    <span className=\"font-medium text-sm\">Soil:</span>\n                    <p className=\"text-xs text-foreground/80\">{info.careTips.soil}</p>\n                  </div>\n                </div>\n              )}\n              {info.careTips.fertilizer && (\n                 <div className=\"flex items-start gap-3 p-2 bg-muted/30 rounded-md\">\n                  <Leaf className=\"h-5 w-5 text-lime-600 mt-1 shrink-0\" />\n                  <div>\n                    <span className=\"font-medium text-sm\">Fertilizer:</span>\n                    <p className=\"text-xs text-foreground/80\">{info.careTips.fertilizer}</p>\n                  </div>\n                </div>\n              )}\n               {info.careTips.humidity && (\n                 <div className=\"flex items-start gap-3 p-2 bg-muted/30 rounded-md\">\n                  <Wind className=\"h-5 w-5 text-sky-500 mt-1 shrink-0\" />\n                  <div>\n                    <span className=\"font-medium text-sm\">Humidity:</span>\n                    <p className=\"text-xs text-foreground/80\">{info.careTips.humidity}</p>\n                  </div>\n                </div>\n              )}\n               {info.careTips.pruning && (\n                 <div className=\"flex items-start gap-3 p-2 bg-muted/30 rounded-md\">\n                  <ScissorsIcon className=\"h-5 w-5 text-gray-600 mt-1 shrink-0\" />\n                  <div>\n                    <span className=\"font-medium text-sm\">Pruning:</span>\n                    <p className=\"text-xs text-foreground/80\">{info.careTips.pruning}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {info.funFacts && info.funFacts.length > 0 && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2 flex items-center gap-2\">\n              <Sparkles className=\"text-accent h-5 w-5\" />\n              Fun Facts!\n            </h3>\n            <ul className=\"list-disc list-inside space-y-1 pl-2 text-foreground/90 bg-muted/30 p-3 rounded-md text-sm\">\n              {info.funFacts.map((fact, index) => (\n                <li key={index}>{fact}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        { !info.plantDescription && !info.careTips && (!info.funFacts || info.funFacts.length === 0) && (\n            <Alert>\n                <AlertCircle className=\"h-5 w-5\"/>\n                <AlertTitle>Limited Information</AlertTitle>\n                <AlertDescription>\n                    We found the plant, but detailed information is currently unavailable.\n                </AlertDescription>\n            </Alert>\n        )}\n\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1608, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/LoadingSpinner.tsx"],"sourcesContent":["import { Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface LoadingSpinnerProps {\n  className?: string;\n  size?: number;\n}\n\nexport default function LoadingSpinner({ className, size = 24 }: LoadingSpinnerProps) {\n  return (\n    <Loader2\n      className={cn('animate-spin text-primary', className)}\n      style={{ width: size, height: size }}\n      aria-label=\"Loading...\"\n    />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOe,SAAS,eAAe,EAAE,SAAS,EAAE,OAAO,EAAE,EAAuB;IAClF,qBACE,6LAAC,oNAAA,CAAA,UAAO;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,6BAA6B;QAC3C,OAAO;YAAE,OAAO;YAAM,QAAQ;QAAK;QACnC,cAAW;;;;;;AAGjB;KARwB","debugId":null}},
    {"offset": {"line": 1643, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/useHistory.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport type { HistoryEntry } from '@/types';\n\nconst HISTORY_STORAGE_KEY = 'vaidyaHistory';\n\nexport function useHistory() {\n  const [history, setHistory] = useState<HistoryEntry[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    try {\n      const storedHistory = localStorage.getItem(HISTORY_STORAGE_KEY);\n      if (storedHistory) {\n        setHistory(JSON.parse(storedHistory));\n      }\n    } catch (error) {\n      console.error(\"Failed to load history from localStorage:\", error);\n      // Optionally, clear corrupted data or handle error\n      // localStorage.removeItem(HISTORY_STORAGE_KEY);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const addHistoryEntry = useCallback((entry: Omit<HistoryEntry, 'id' | 'date'>) => {\n    setHistory(prevHistory => {\n      const newEntry: HistoryEntry = {\n        ...entry,\n        id: Date.now().toString(), // Simple unique ID\n        date: new Date().toISOString(),\n      };\n      const updatedHistory = [newEntry, ...prevHistory].slice(0, 50); // Limit history size\n      try {\n        localStorage.setItem(HISTORY_STORAGE_KEY, JSON.stringify(updatedHistory));\n      } catch (error) {\n        console.error(\"Failed to save history to localStorage:\", error);\n      }\n      return updatedHistory;\n    });\n  }, []);\n\n  const clearHistory = useCallback(() => {\n    setHistory([]);\n    try {\n      localStorage.removeItem(HISTORY_STORAGE_KEY);\n    } catch (error) {\n      console.error(\"Failed to clear history from localStorage:\", error);\n    }\n  }, []);\n  \n  const getHistoryEntryById = useCallback((id: string): HistoryEntry | undefined => {\n    return history.find(entry => entry.id === id);\n  }, [history]);\n\n\n  return { history, addHistoryEntry, clearHistory, isLoading, getHistoryEntryById };\n}\n"],"names":[],"mappings":";;;AAEA;;AAFA;;AAKA,MAAM,sBAAsB;AAErB,SAAS;;IACd,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB,EAAE;IACzD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,IAAI;gBACF,MAAM,gBAAgB,aAAa,OAAO,CAAC;gBAC3C,IAAI,eAAe;oBACjB,WAAW,KAAK,KAAK,CAAC;gBACxB;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,6CAA6C;YAC3D,mDAAmD;YACnD,gDAAgD;YAClD,SAAU;gBACR,aAAa;YACf;QACF;+BAAG,EAAE;IAEL,MAAM,kBAAkB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;mDAAE,CAAC;YACnC;2DAAW,CAAA;oBACT,MAAM,WAAyB;wBAC7B,GAAG,KAAK;wBACR,IAAI,KAAK,GAAG,GAAG,QAAQ;wBACvB,MAAM,IAAI,OAAO,WAAW;oBAC9B;oBACA,MAAM,iBAAiB;wBAAC;2BAAa;qBAAY,CAAC,KAAK,CAAC,GAAG,KAAK,qBAAqB;oBACrF,IAAI;wBACF,aAAa,OAAO,CAAC,qBAAqB,KAAK,SAAS,CAAC;oBAC3D,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,2CAA2C;oBAC3D;oBACA,OAAO;gBACT;;QACF;kDAAG,EAAE;IAEL,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAAE;YAC/B,WAAW,EAAE;YACb,IAAI;gBACF,aAAa,UAAU,CAAC;YAC1B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,8CAA8C;YAC9D;QACF;+CAAG,EAAE;IAEL,MAAM,sBAAsB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;uDAAE,CAAC;YACvC,OAAO,QAAQ,IAAI;+DAAC,CAAA,QAAS,MAAM,EAAE,KAAK;;QAC5C;sDAAG;QAAC;KAAQ;IAGZ,OAAO;QAAE;QAAS;QAAiB;QAAc;QAAW;IAAoB;AAClF;GAnDgB","debugId":null}},
    {"offset": {"line": 1731, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-plant-disease.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Analyzes a plant disease from an image and suggests solutions.\n *\n * - analyzePlantDisease - A function that handles the plant disease analysis process.\n * - AnalyzePlantDiseaseInput - The input type for the analyzePlantDisease function.\n * - AnalyzePlantDiseaseOutput - The return type for the analyzePlantDisease function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzePlantDiseaseInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of a plant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  description: z.string().describe('The description of the plant.'),\n});\nexport type AnalyzePlantDiseaseInput = z.infer<typeof AnalyzePlantDiseaseInputSchema>;\n\nconst AnalyzePlantDiseaseOutputSchema = z.object({\n  diseaseDetected: z.boolean().describe('Whether a disease was detected or not.'),\n  diseaseName: z.string().describe('The name of the detected disease, if any. If no disease, state \"Healthy\" or similar positive confirmation.'),\n  suggestedSolutions: z\n    .array(z.string())\n    .describe('A list of suggested solutions for the detected disease. Prioritize common, accessible, and home-based remedies where appropriate. If healthy, provide general care tips or positive reinforcement.'),\n  confidenceScore: z.number().optional().describe('A numerical score (0-1) indicating the confidence of the disease detection. Only include if a disease is detected.'),\n  possibleCauses: z.array(z.string()).optional().describe('A list of potential causes for the detected disease or symptoms.'),\n});\nexport type AnalyzePlantDiseaseOutput = z.infer<typeof AnalyzePlantDiseaseOutputSchema>;\n\nexport async function analyzePlantDisease(input: AnalyzePlantDiseaseInput): Promise<AnalyzePlantDiseaseOutput> {\n  return analyzePlantDiseaseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzePlantDiseasePrompt',\n  input: {schema: AnalyzePlantDiseaseInputSchema},\n  output: {schema: AnalyzePlantDiseaseOutputSchema},\n  prompt: `You are an expert botanist AI specializing in diagnosing plant diseases and recommending treatments, with a focus on solutions readily available to home gardeners.\n\n  Analyze the provided plant image and description.\n\n  Image: {{media url=photoDataUri}}\n  Description: {{{description}}}\n\n  Your analysis should include:\n  1.  **Disease Detection**: Determine if a plant disease is present. Set 'diseaseDetected' to true or false.\n  2.  **Disease Name**: If a disease is detected, identify its common name. If the plant appears healthy, state \"Healthy\" or a similar positive assessment.\n  3.  **Suggested Solutions**:\n      *   If a disease is detected, provide a list of practical, actionable solutions. Prioritize solutions that can be implemented at home (e.g., adjusting watering, pruning, using common household items if applicable like soapy water for aphids, or readily available organic treatments).\n      *   If the plant is healthy, provide 2-3 general care tips relevant to what you can infer about the plant type, or simply a positive note like \"Keep up the good care!\".\n  4.  **Confidence Score** (Optional but Recommended for Diseases): If a disease is detected, provide a confidence score between 0.0 and 1.0 for your diagnosis.\n  5.  **Possible Causes** (Optional but Recommended for Diseases): If a disease is detected, list a few likely causes (e.g., overwatering, poor air circulation, specific pests).\n\n  Structure your output strictly according to the AnalyzePlantDiseaseOutputSchema. Ensure all fields are appropriately filled based on your analysis.\n  If no disease is detected, 'diseaseName' should reflect that (e.g., \"Healthy\"), and 'suggestedSolutions' can be general tips. 'confidenceScore' and 'possibleCauses' can be omitted if no disease is detected.\n  `,\n});\n\nconst analyzePlantDiseaseFlow = ai.defineFlow(\n  {\n    name: 'analyzePlantDiseaseFlow',\n    inputSchema: AnalyzePlantDiseaseInputSchema,\n    outputSchema: AnalyzePlantDiseaseOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    if (!output) {\n        return {\n            diseaseDetected: false,\n            diseaseName: \"Analysis Inconclusive\",\n            suggestedSolutions: [\"Could not analyze the plant at this time. Please try again with a clearer image or description.\"],\n        };\n    }\n    // Ensure suggestedSolutions is always an array\n    if (output.suggestedSolutions && !Array.isArray(output.suggestedSolutions)) {\n        // @ts-ignore\n        output.suggestedSolutions = [String(output.suggestedSolutions)];\n    } else if (!output.suggestedSolutions) {\n        output.suggestedSolutions = [];\n    }\n    // Ensure possibleCauses is always an array if present\n    if (output.possibleCauses && !Array.isArray(output.possibleCauses)) {\n        // @ts-ignore\n        output.possibleCauses = [String(output.possibleCauses)];\n    } else if (output.possibleCauses === undefined) {\n        output.possibleCauses = [];\n    }\n\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;IAkCsB","debugId":null}},
    {"offset": {"line": 1743, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/get-plant-info-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Provides general information and care tips for a plant based on an image and/or description.\n *\n * - getPlantInfo - A function that handles fetching plant information.\n * - GetPlantInfoInput - The input type for the getPlantInfo function.\n * - GetPlantInfoOutput - The return type for the getPlantInfo function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GetPlantInfoInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of a plant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  description: z.string().optional().describe('An optional user-provided description of the plant or specific questions.'),\n});\nexport type GetPlantInfoInput = z.infer<typeof GetPlantInfoInputSchema>;\n\nconst GetPlantInfoOutputSchema = z.object({\n  isPlant: z.boolean().describe('Whether the image is identified as a plant.'),\n  commonName: z.string().optional().describe('The common name of the plant, if identified.'),\n  latinName: z.string().optional().describe('The Latin name of the plant, if identified.'),\n  plantDescription: z.string().optional().describe('A general description of the plant, its appearance, and origin.'),\n  careTips: z.object({\n    sunlight: z.string().optional().describe('Sunlight requirements (e.g., \"full sun\", \"partial shade\", \"indirect light\").'),\n    water: z.string().optional().describe('Watering guidelines (e.g., \"water when top inch of soil is dry\", \"keep soil consistently moist\").'),\n    soil: z.string().optional().describe('Recommended soil type (e.g., \"well-draining potting mix\", \"sandy soil\").'),\n    fertilizer: z.string().optional().describe('Fertilizing advice (e.g., \"fertilize monthly during growing season\", \"use balanced liquid fertilizer\").'),\n    humidity: z.string().optional().describe('Humidity preferences (e.g., \"prefers high humidity, mist regularly\", \"average room humidity is fine\").'),\n    pruning: z.string().optional().describe('Pruning tips (e.g., \"prune in spring to encourage bushier growth\", \"remove dead or yellowing leaves\").'),\n  }).optional().describe('Comprehensive care tips for the plant.'),\n  funFacts: z.array(z.string()).optional().describe('Up to 3 interesting or fun facts about the plant.'),\n  error: z.string().optional().describe('Error message if plant cannot be identified or information not found. Provide this if isPlant is false or if no meaningful information can be retrieved.')\n});\nexport type GetPlantInfoOutput = z.infer<typeof GetPlantInfoOutputSchema>;\n\n\nexport async function getPlantInfo(input: GetPlantInfoInput): Promise<GetPlantInfoOutput> {\n  return getPlantInfoFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'getPlantInfoPrompt',\n  input: {schema: GetPlantInfoInputSchema},\n  output: {schema: GetPlantInfoOutputSchema},\n  prompt: `You are a knowledgeable botanist and plant care expert.\n  Based on the provided image and optional description, identify the plant and provide comprehensive information about it.\n\n  Image: {{media url=photoDataUri}}\n  {{#if description}}User Description/Questions: {{{description}}}{{/if}}\n\n  Your tasks:\n  1. Determine if the image contains a plant. Set 'isPlant' accordingly.\n  2. If it is a plant, identify its common and Latin names. If unsure, state that.\n  3. Provide a general description of the plant (appearance, origin, typical size).\n  4. Offer detailed care tips covering: sunlight, watering, soil, fertilizing, humidity, and pruning. Make these practical and easy to understand for a home gardener.\n  5. Share 2-3 interesting or fun facts about the plant.\n  6. If the image is not a plant, or if you cannot confidently identify the plant or provide information, set 'isPlant' to false (if applicable) and provide a helpful message in the 'error' field. For example, \"Could not identify the plant from the image provided. Please try a clearer image or add a description.\" or \"The image does not appear to be a plant.\"\n\n  Structure your output strictly according to the GetPlantInfoOutputSchema.\n  If a field is optional and no information is found, omit it or provide a null/empty value as appropriate for the schema.\n  Example for careTips if a specific tip is unknown: \"soil\": \"General purpose potting mix.\"\n  If no care tips can be provided at all, the careTips object itself can be omitted if your schema allows, or contain empty/null strings for its fields.\n  Ensure funFacts is an array of strings.\n  `,\n});\n\nconst getPlantInfoFlow = ai.defineFlow(\n  {\n    name: 'getPlantInfoFlow',\n    inputSchema: GetPlantInfoInputSchema,\n    outputSchema: GetPlantInfoOutputSchema,\n  },\n  async (input) => {\n    const {output} = await prompt(input);\n    if (!output) {\n        return {\n            isPlant: false,\n            error: \"Failed to get a response from the AI model. Please try again.\"\n        }\n    }\n    // Ensure funFacts is an array, even if LLM returns a single string or is missing\n    if (output.funFacts && !Array.isArray(output.funFacts)) {\n        // @ts-ignore\n        output.funFacts = [String(output.funFacts)];\n    } else if (!output.funFacts) {\n        output.funFacts = [];\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;IAyCsB","debugId":null}},
    {"offset": {"line": 1755, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/reason-about-plant-suggestions.ts"],"sourcesContent":["// 'use server';\n\n/**\n * @fileOverview This flow filters plant suggestions based on the plant's condition.\n *\n * - reasonAboutPlantSuggestions - A function that filters plant suggestions based on the plant's condition.\n * - ReasonAboutPlantSuggestionsInput - The input type for the reasonAboutPlantSuggestions function.\n * - ReasonAboutPlantSuggestionsOutput - The return type for the reasonAboutPlantSuggestions function.\n */\n\n'use server';\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ReasonAboutPlantSuggestionsInputSchema = z.object({\n  plantCondition: z.string().describe('The condition of the plant.'),\n  allSuggestions: z.array(z.string()).describe('All possible suggestions for plant care.'),\n});\nexport type ReasonAboutPlantSuggestionsInput = z.infer<typeof ReasonAboutPlantSuggestionsInputSchema>;\n\nconst ReasonAboutPlantSuggestionsOutputSchema = z.array(z.string()).describe('The filtered suggestions relevant to the plant condition.');\nexport type ReasonAboutPlantSuggestionsOutput = z.infer<typeof ReasonAboutPlantSuggestionsOutputSchema>;\n\nexport async function reasonAboutPlantSuggestions(input: ReasonAboutPlantSuggestionsInput): Promise<ReasonAboutPlantSuggestionsOutput> {\n  return reasonAboutPlantSuggestionsFlow(input);\n}\n\nconst suggestionFilterPrompt = ai.definePrompt({\n  name: 'suggestionFilterPrompt',\n  input: {schema: ReasonAboutPlantSuggestionsInputSchema},\n  output: {schema: ReasonAboutPlantSuggestionsOutputSchema},\n  prompt: `Given the following plant condition: {{{plantCondition}}}, and a list of suggestions: {{{allSuggestions}}}, filter the suggestions to only include those that are relevant to the plant's condition. Return the filtered list of suggestions.\n\n  Instructions:  Do not return any suggestions that are not relevant to the plant's condition. Only respond with the suggestions, each on their own line. Do not include any other text. If no suggestions are relevant, return an empty array.`, \n});\n\nconst reasonAboutPlantSuggestionsFlow = ai.defineFlow(\n  {\n    name: 'reasonAboutPlantSuggestionsFlow',\n    inputSchema: ReasonAboutPlantSuggestionsInputSchema,\n    outputSchema: ReasonAboutPlantSuggestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await suggestionFilterPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,gBAAgB;AAEhB;;;;;;CAMC;;;;;IAgBqB","debugId":null}},
    {"offset": {"line": 1774, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/constants.ts"],"sourcesContent":["export const ALL_PLANT_SUGGESTIONS: string[] = [\n  \"Ensure proper watering schedule based on plant type and soil moisture.\",\n  \"Check for adequate sunlight exposure, ensuring it matches plant's needs.\",\n  \"Improve soil drainage if waterlogging is observed.\",\n  \"Apply an appropriate fungicide if fungal infection is suspected.\",\n  \"Prune affected leaves, stems, or branches using sterile tools.\",\n  \"Isolate the plant from healthy ones to prevent disease spread.\",\n  \"Use organic pest control methods like neem oil or insecticidal soap for pests.\",\n  \"Fertilize with a balanced plant food suitable for the specific plant.\",\n  \"Repot into fresh, sterile potting mix if root rot or soil-borne diseases are present.\",\n  \"Monitor and adjust humidity levels, especially for tropical plants.\",\n  \"Inspect regularly for early signs of pests or diseases.\",\n  \"Ensure good air circulation around the plant.\",\n  \"Avoid over-fertilizing, which can harm the plant.\",\n  \"Water at the base of the plant to keep foliage dry and reduce fungal risk.\",\n  \"Use mulch to retain soil moisture and suppress weeds.\",\n  \"Adjust watering frequency according to seasons and plant growth stages.\",\n  \"Consider companion planting to deter pests naturally.\",\n  \"If disease is severe, consider disposing of the plant to protect others.\"\n];\n"],"names":[],"mappings":";;;AAAO,MAAM,wBAAkC;IAC7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD","debugId":null}},
    {"offset": {"line": 1806, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from 'react';\nimport PlantAnalysisForm from '@/components/PlantAnalysisForm';\nimport AnalysisResult from '@/components/AnalysisResult';\nimport PlantInformationDisplay from '@/components/PlantInformationDisplay';\nimport LoadingSpinner from '@/components/LoadingSpinner';\nimport { useToast } from '@/hooks/use-toast';\nimport { useHistory } from '@/hooks/useHistory';\n\nimport { analyzePlantDisease } from '@/ai/flows/analyze-plant-disease';\nimport type { AnalyzePlantDiseaseOutput } from '@/ai/flows/analyze-plant-disease';\nimport { getPlantInfo } from '@/ai/flows/get-plant-info-flow';\nimport type { GetPlantInfoOutput } from '@/ai/flows/get-plant-info-flow';\n\nimport { reasonAboutPlantSuggestions } from '@/ai/flows/reason-about-plant-suggestions';\nimport type { AnalysisResultData, PlantInformation, AnalysisAction } from '@/types';\nimport { ALL_PLANT_SUGGESTIONS } from '@/lib/constants';\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Terminal } from \"lucide-react\";\n\n\nexport default function HomePage() {\n  const [analysisResult, setAnalysisResult] = useState<AnalysisResultData | null>(null);\n  const [plantInfoResult, setPlantInfoResult] = useState<PlantInformation | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { addHistoryEntry } = useHistory();\n\n  const handleFormSubmit = async (photoDataUri: string, description: string, originalImageName: string, action: AnalysisAction) => {\n    setIsProcessing(true);\n    setError(null);\n    setAnalysisResult(null);\n    setPlantInfoResult(null);\n\n    try {\n      if (action === 'disease') {\n        const diseaseAnalysis: AnalyzePlantDiseaseOutput = await analyzePlantDisease({\n          photoDataUri,\n          description,\n        });\n\n        let finalSuggestions = diseaseAnalysis.suggestedSolutions || [];\n\n        if (diseaseAnalysis.diseaseDetected && diseaseAnalysis.diseaseName) {\n          const suggestionsToFilter = (diseaseAnalysis.suggestedSolutions && diseaseAnalysis.suggestedSolutions.length > 0) \n                                      ? diseaseAnalysis.suggestedSolutions\n                                      : ALL_PLANT_SUGGESTIONS;\n          \n          const filteredSuggestions = await reasonAboutPlantSuggestions({\n            plantCondition: diseaseAnalysis.diseaseName,\n            allSuggestions: suggestionsToFilter,\n          });\n          finalSuggestions = filteredSuggestions.length > 0 ? filteredSuggestions : (diseaseAnalysis.suggestedSolutions || []);\n        } else if (!diseaseAnalysis.diseaseDetected) {\n          finalSuggestions = diseaseAnalysis.suggestedSolutions || [];\n        }\n\n        const resultData: AnalysisResultData = {\n          diseaseDetected: diseaseAnalysis.diseaseDetected,\n          diseaseName: diseaseAnalysis.diseaseName || (diseaseAnalysis.diseaseDetected ? \"Unknown Issue\" : \"Healthy\"),\n          suggestedSolutions: finalSuggestions,\n        };\n        \n        setAnalysisResult(resultData);\n        // Only add disease analysis to history for now\n        addHistoryEntry({\n          imageDataUri: photoDataUri,\n          originalImageName,\n          description,\n          ...resultData,\n        });\n\n        toast({\n          title: \"Disease Analysis Complete\",\n          description: diseaseAnalysis.diseaseDetected \n            ? `Detected: ${diseaseAnalysis.diseaseName || \"Unknown Issue\"}`\n            : \"Plant appears healthy!\",\n        });\n\n      } else if (action === 'info') {\n        const infoResult: GetPlantInfoOutput = await getPlantInfo({\n          photoDataUri,\n          description,\n        });\n        setPlantInfoResult(infoResult);\n        if (infoResult.error) {\n            toast({\n                variant: \"default\", // It's not necessarily a \"destructive\" error if plant not found\n                title: \"Plant Information\",\n                description: infoResult.error,\n            });\n        } else if (!infoResult.isPlant) {\n             toast({\n                title: \"Plant Information\",\n                description: \"The image does not appear to be a plant.\",\n            });\n        }\n        else {\n            toast({\n                title: \"Plant Information Retrieved\",\n                description: `Found info for ${infoResult.commonName || 'the plant'}.`,\n            });\n        }\n      }\n\n    } catch (e: any) {\n      console.error(\"Processing failed:\", e);\n      const errorMessage = e.message || \"An unknown error occurred.\";\n      setError(errorMessage);\n      toast({\n        variant: \"destructive\",\n        title: \"Processing Failed\",\n        description: errorMessage,\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-8\">\n      <PlantAnalysisForm onSubmit={handleFormSubmit} isProcessing={isProcessing} />\n      \n      {isProcessing && (\n        <div className=\"flex flex-col items-center space-y-2 p-4\">\n          <LoadingSpinner size={48} />\n          <p className=\"text-lg text-primary animate-pulse\">AI is thinking, please wait...</p>\n        </div>\n      )}\n\n      {error && (\n         <Alert variant=\"destructive\" className=\"w-full max-w-lg mx-auto\">\n           <Terminal className=\"h-4 w-4\" />\n           <AlertTitle>Error</AlertTitle>\n           <AlertDescription>\n             {error}\n           </AlertDescription>\n         </Alert>\n      )}\n\n      {analysisResult && !isProcessing && <AnalysisResult result={analysisResult} />}\n      {plantInfoResult && !isProcessing && <PlantInformationDisplay info={plantInfoResult} />}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}