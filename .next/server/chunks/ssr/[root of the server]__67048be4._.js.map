{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-plant-disease.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Analyzes a plant disease from an image and suggests solutions.\n *\n * - analyzePlantDisease - A function that handles the plant disease analysis process.\n * - AnalyzePlantDiseaseInput - The input type for the analyzePlantDisease function.\n * - AnalyzePlantDiseaseOutput - The return type for the analyzePlantDisease function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzePlantDiseaseInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of a plant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  description: z.string().describe('The description of the plant.'),\n});\nexport type AnalyzePlantDiseaseInput = z.infer<typeof AnalyzePlantDiseaseInputSchema>;\n\nconst AnalyzePlantDiseaseOutputSchema = z.object({\n  diseaseDetected: z.boolean().describe('Whether a disease was detected or not.'),\n  diseaseName: z.string().describe('The name of the detected disease, if any.'),\n  suggestedSolutions: z\n    .array(z.string())\n    .describe('A list of suggested solutions for the detected disease.'),\n});\nexport type AnalyzePlantDiseaseOutput = z.infer<typeof AnalyzePlantDiseaseOutputSchema>;\n\nexport async function analyzePlantDisease(input: AnalyzePlantDiseaseInput): Promise<AnalyzePlantDiseaseOutput> {\n  return analyzePlantDiseaseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzePlantDiseasePrompt',\n  input: {schema: AnalyzePlantDiseaseInputSchema},\n  output: {schema: AnalyzePlantDiseaseOutputSchema},\n  prompt: `You are an expert in plant diseases.\n\n  Analyze the following plant image and description to detect potential diseases and suggest possible solutions.\n\n  Description: {{{description}}}\n  Image: {{media url=photoDataUri}}\n\n  Output should be structured as follows:\n  - diseaseDetected: true if a disease is detected, false otherwise.\n  - diseaseName: The name of the detected disease, if any.\n  - suggestedSolutions: A list of suggested solutions for the detected disease.\n  `,\n});\n\nconst analyzePlantDiseaseFlow = ai.defineFlow(\n  {\n    name: 'analyzePlantDiseaseFlow',\n    inputSchema: AnalyzePlantDiseaseInputSchema,\n    outputSchema: AnalyzePlantDiseaseOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IACtC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,oBAAoB,uIAAA,CAAA,IAAC,CAClB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd;AAGO,eAAe,uCAAiB,GAAjB,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;EAWT,CAAC;AACH;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA/BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/reason-about-plant-suggestions.ts"],"sourcesContent":["// 'use server';\n\n/**\n * @fileOverview This flow filters plant suggestions based on the plant's condition.\n *\n * - reasonAboutPlantSuggestions - A function that filters plant suggestions based on the plant's condition.\n * - ReasonAboutPlantSuggestionsInput - The input type for the reasonAboutPlantSuggestions function.\n * - ReasonAboutPlantSuggestionsOutput - The return type for the reasonAboutPlantSuggestions function.\n */\n\n'use server';\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ReasonAboutPlantSuggestionsInputSchema = z.object({\n  plantCondition: z.string().describe('The condition of the plant.'),\n  allSuggestions: z.array(z.string()).describe('All possible suggestions for plant care.'),\n});\nexport type ReasonAboutPlantSuggestionsInput = z.infer<typeof ReasonAboutPlantSuggestionsInputSchema>;\n\nconst ReasonAboutPlantSuggestionsOutputSchema = z.array(z.string()).describe('The filtered suggestions relevant to the plant condition.');\nexport type ReasonAboutPlantSuggestionsOutput = z.infer<typeof ReasonAboutPlantSuggestionsOutputSchema>;\n\nexport async function reasonAboutPlantSuggestions(input: ReasonAboutPlantSuggestionsInput): Promise<ReasonAboutPlantSuggestionsOutput> {\n  return reasonAboutPlantSuggestionsFlow(input);\n}\n\nconst suggestionFilterPrompt = ai.definePrompt({\n  name: 'suggestionFilterPrompt',\n  input: {schema: ReasonAboutPlantSuggestionsInputSchema},\n  output: {schema: ReasonAboutPlantSuggestionsOutputSchema},\n  prompt: `Given the following plant condition: {{{plantCondition}}}, and a list of suggestions: {{{allSuggestions}}}, filter the suggestions to only include those that are relevant to the plant's condition. Return the filtered list of suggestions.\n\n  Instructions:  Do not return any suggestions that are not relevant to the plant's condition. Only respond with the suggestions, each on their own line. Do not include any other text. If no suggestions are relevant, return an empty array.`, \n});\n\nconst reasonAboutPlantSuggestionsFlow = ai.defineFlow(\n  {\n    name: 'reasonAboutPlantSuggestionsFlow',\n    inputSchema: ReasonAboutPlantSuggestionsInputSchema,\n    outputSchema: ReasonAboutPlantSuggestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await suggestionFilterPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,gBAAgB;AAEhB;;;;;;CAMC;;;;;AAID;AACA;AAAA;;;;;;AAEA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AAC/C;AAGA,MAAM,0CAA0C,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AAGtE,eAAe,uCAAyB,GAAzB,4BAA4B,KAAuC;IACvF,OAAO,gCAAgC;AACzC;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7C,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsC;IACtD,QAAQ;QAAC,QAAQ;IAAuC;IACxD,QAAQ,CAAC;;+OAEoO,CAAC;AAChP;AAEA,MAAM,kCAAkC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,uBAAuB;IAC9C,OAAO;AACT;;;IAtBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}